<!-- Load javascripts at bottom, this will reduce page load time -->
<!-- BEGIN CORE PLUGINS(REQUIRED FOR ALL PAGES) -->
<!--[if lt IE 9]>
<script src="${APP_PATH}/conf/resources/plugins/respond.min.js"></script>  
<![endif]-->
<script src="${APP_PATH}/conf/resources/plugins/jquery-1.10.2.min.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/bootstrap/js/bootstrap.min.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/back-to-top.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/bootbox/bootbox.min.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/bootstrap-toastr/toastr.min.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/bootstrap-modal/js/bootstrap-modalmanager.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/bootstrap-modal/js/bootstrap-modal.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/uniform/jquery.uniform.min.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/jquery-validation/jquery.validate.min.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/template.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/underscore.min.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/underscore-o2p.js"></script>
<script src="${APP_PATH}/conf/resources/plugins/jquery-validation/jquery.validate.min.js"></script>
<!-- build:remove -->
<script src="${APP_PATH}/conf/mock/mock.js"></script>
<!-- /build -->
<script src="${APP_PATH}/conf/resources/i18n/language-en.js"></script>
<script src="${APP_PATH}/conf/resources/scripts/app.js"></script>
<!-- build:remove -->
<script>
//alert("dddddddd")
  $.ajaxSetup({
    data: Math.random().toString()
  })
  $(document).ajaxSuccess(function(event, jqXHR, ajaxOptions) {
    // 只能打印出get类型的传参
    console.log('send params:' + ajaxOptions.data);
    if (jqXHR.responseJSON) {
      console.log(jqXHR.responseJSON)
    };
  });
  var Random = Mock.Random;
  Mock.setup({
    timeout: '200-1000'
  })
  Mock.mock(/product.json/, {
    'health': {
      'code': 1,
      'message': function() {
        if (this.code != 1) {
          return 'not health, no data'
        }
      }
    },
    'data|0-100': [{
      "organizationName|1": ['Telenor', 'Amazon', 'Uber', 'Tecent', 'Reliance', 'Alibaba', 'Sumsung'],
      "productName|1": "@word(5,20)",
      "productCode|+1": 1,
      "systemName|1": ['JD Edwards EnterpriseOne', 'Catalog Management', 'Microsoft Store', 'Oracle Database', 'PeopleSoft'],
      "createTime": function() {
        return Random.date('yyyy-MM-dd') + ' ' + Random.time('HH:mm:ss')
      },
      "platformSuccess|2": ['Telenor', 'Amazon', 'Uber', 'Tecent', 'Reliance', 'Alibaba', 'Sumsung'],
      "platformFail|1": ['Telenor', 'Amazon', 'Uber', 'Tecent', 'Reliance', 'Alibaba', 'Sumsung']
    }]
  })
  Mock.mock(/offer.json/, {
    'health': {
      'code': 1,
      'message': function() {
        if (this.code != 1) {
          return 'not health, no data'
        }
      }
    },
    'data|0-100': [{
      "organizationName|1": ['Telenor', 'Amazon', 'Uber', 'Tecent', 'Reliance', 'Alibaba', 'Sumsung'],
      "offerName|1": "@word(5,20)",
      "offerCode|+1": 1,
      "product|1": ['JD Edwards EnterpriseOne', 'Catalog Management', 'Microsoft Store', 'Oracle Database', 'PeopleSoft'],
      "createTime": function() {
        return Random.date('yyyy-MM-dd') + ' ' + Random.time('HH:mm:ss')
      },
      "platformSuccess|1": ['Telenor', 'Amazon', 'Uber', 'Tecent', 'Reliance', 'Alibaba', 'Sumsung'],
      "platformFail|1": ['Telenor', 'Amazon', 'Uber', 'Tecent', 'Reliance', 'Alibaba', 'Sumsung']
    }]
  })
  Mock.mock(/platformListData.json/, {
    'health': {
      'code': 1,
      'message': function() {
        if (this.code != 1) {
          return 'not health, no data'
        }
      }
    },
    'data|0-100': [{
      "localName|1": ['Telenor', 'Amazon', 'Uber', 'Tecent', 'Reliance', 'Alibaba', 'Sumsung'],
      "id|+1": 1
    }]
  })
  Mock.mock(/systemList.json/, {
    'health': {
      'code': 1,
      'message': function() {
        if (this.code != 1) {
          return 'not health, no data'
        }
      }
    },
    'systems|0-100': [{
      "id|+1": 100,
      "systemName": "@FIRST"
    }]
  })
  Mock.mock(/productDetailData.json/, {
    'health': {
      'code': 1,
      'message': function() {
        if (this.code != 1) {
          return 'not health, no data'
        }
      }
    },
    "productName": "@FIRST",
    "offerName|1": "@FIRST",
    "productCode|+1": 100,
    "systemName": "@FIRST",
    "serviceModule": "@FIRST",
    "dependentType": "@FIRST",
    "status": "@FIRST",
    "serviceAttribute|0-5": [{
      "name": "@FIRST",
      "customized": "@FIRST",
      "code|+1": 100,
      "specificationValueType": "@FIRST",
      "remarks": "@FIRST",
      "default": "@FIRST"
    }],
    "productAttribute|0-5": [{
      "name": "@FIRST",
      "customized": "@FIRST",
      "code|+1": 100,
      "specificationValueType": "@FIRST",
      "remarks": "@FIRST",
      "default": "@FIRST"
    }]
  })
  Mock.mock(/offerDetailData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      "offerName|1": "@FIRST",
      "offerCode|+1": 100,
      "offerType": "@FIRST",
      "salesChannel": "@FIRST",
      "validityDate": function() {
        return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
      },
      "status": "@FIRST",
      "description": "@paragraph",
      "products|0-5": [{
        "name": "@FIRST",
        "productProvider": "@FIRST",
        "code|+1": 100,
        "minValue|1-50": 1,
        "maxValue|51-100": 51
      }],
      "productOffer|0-5": [{
        "name": "@FIRST",
        "code|+1": 100,
        "minValue|1-50": 1,
        "maxValue|51-100": 51
      }],
      "mutualExclusion|0-5": [{
        "name": "@FIRST",
        "code|+1": 100
      }],
      "pricePlan|3": [{
        "priceName": "@FIRST",
        "offsetType": "@FIRST",
        "effectiveDate": function() {
          return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
        },
        "priceObjectProduct": "@FIRST",
        "priority|1-1000": 1,
        "chargeInformation|0-5": [{ // 0-5, 0表示无，
          "type|1-5": 0, //1-5表示  'Basic Tariff','Recurring Charge','Rating Discount','One-Time Charge','Billing Discount'; 
          "id|+1": 1000
        }],
      }],
      "settlement": [{
        "operator|1": ["DK", "Reliance", "Telenor", "Baidu"],
        "name": "@FIRST",
        "firstSettlementDate": function() {
          return Random.datetime('yyyy/MM/dd')
        },
        "cycleType": "@word(5,10)",
        "productCategory": "@FIRST",
        "effectiveDate": function() {
          return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
        },
        "description": "@paragraph",
        "rules|3": [{ // 0-5, 0表示无，
          "type|+1": 1, //1-3表示  'Recurrinng Rule','Aggregation Rule','One-Time Charge Rule'
          "id|+1": 1000
        }],
      }]
    })
    //提交同步时返回的数据
  Mock.mock(/sync.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      'data': {
        'code|1-3': 1, //1表示全部推送成功,2部分成功，3失败
        'message': function() {
          switch (this.code) {
            case 1:
              return '全部推送成功';
              break;
            case 2:
              return '部分推送成功，其中telenor,Amazon推送失败';
              break;
            case 3:
              return '全部推送失败';
              break;
          }
        }
      }
    })
    //
  Mock.mock(/basicTariff4PdtOfrData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'

          }
        }
      },
      "priceName": "@word(5,20)",
      "taxType": "@word(5,20)",
      "effectiveDate": function() {
        return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
      },
      "subjectType": "@word(5,20)",
      "pricingSubject": "@word(5,20)",
      "chargingUnitNum": 1,
      "chargingUnitName": "Sec",
      "currency|1": ['Euro', 'DKK', 'HUF', 'DollarCent'],
      "chargeType|1": ['Simple', 'Ladder'],
      "chargeNum1": 100,
      "chargeName1": function() {
        return this.currency + '/' + this.chargingUnitNum + '*' + this.chargingUnitName
      },
      "chargeNum2": 100,
      "chargeName2": function() {
        return this.currency
      },
      "description": "@paragraph",
    })
    //
  Mock.mock(/recurringCharge4PdtOfrData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      "priceName": "@word(5,20)",
      "taxType": "@word(5,20)",
      "effectiveDate": function() {
        return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
      },
      "chargingNum|1-100": 1,
      "chargingUnit|1": ['Euro', 'DKK', 'HUF', 'DollarCent'],
      "subject": "@word(5,20)",
      "priority|1-1000": 100,
      "description": "@paragraph",
    })
    //
  Mock.mock(/ratingDiscount4PdtOfrData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      "priceName": "@word(5,20)",
      "timeRange": "@word(5,20)",
      "effectiveDate": function() {
        return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
      },
      "subjectType|1": ['VOICE', 'SMS', 'ISMP', 'MMS', 'WLAN', 'GPRS'],
      "pricingSubject": "@word(5,20)",
      "ratingType|1-3": 1, //1-3依次对应'Percentage','Fixed charge','Free'. 当=1时"ratingMoneyNum"不用返回，当=2时"ratingNum1","ratingNum2","maxRatingMoneyNum"不用返回，当=3时，下面4个都不要返回
      "ratingNum1|1-100": 1,
      "ratingNum2|1-100": 1,
      "maxRatingMoneyNum|1-100": 1,
      "ratingMoneyNum|1-100": 1,
      "chargeUnitName|1": ['Euro', 'DKK', 'HUF', 'DollarCent'],
      "description": "@paragraph",
    }) //
  Mock.mock(/oneTimeCharge4PdtOfrData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      "priceName": "@word(5,20)",
      "taxType": "@word(5,20)",
      "effectiveDate": function() {
        return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
      },
      "serviceType": "@word(5,20)",
      "subject": "@word(5,20)",
      "costType": "@word(5,20)",
      "chargeNum|1-100": 1,
      "chargeName": "Sec",
      "currency|1": ['Euro', 'DKK', 'HUF', 'DollarCent'],
      "priority|1-1000": 11,
      "description": "@paragraph",
    })
    //
  Mock.mock(/billingDiscount4PdtOfrData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      "priceName": "@word(5,20)",
      "referenceSubject": "@word(5,20)",
      "contrastSubject": "@word(5,20)",
      "taxType|1": ['VAT exclusive', 'VAT inclusive'],
      "priority|1-1000": 100,
      "maxDiscountMoneyNum|1-1000": 100,
      "maxDiscountMoneyName|1": ['Euro', 'DKK', 'HUF', 'DollarCent'],
      "effectiveDate": function() {
        return Random.datetime('yyyy/MM/dd') + ' - ' + Random.datetime('yyyy/MM/dd')
      },
      "calcType|1": ['Section', 'The Final Section'],
      "discountType|1-5": 1, //'Percentage','Fixed charge','Ceiling cap','Rebate','Commitment'
      "charge|0-3": [{
        "id|+1": 1,
        "chargeArrangeMin|0-5": 0,
        "chargeArrangeMax|6-10": 6,
        "discount": function() {
          return Random.natural(0, 100) + '%';
        },
        "recurringCharge|1-100": 1
      }],
      "description": "@paragraph",
    })
    //
  Mock.mock(/settlementRecurringRuleData.json/, {
    'health': {
      'code': 1,
      'message': function() {
        if (this.code != 1) {
          return 'not health, no data'
        }
      }
    },
    'oldForm': {
      "ruleName": "@word(5,20)",
      "subscriptionStatisticsMethod|1-2": 1, //只能返回1-2,1表示Up to User,2表示Up to Customer
      "statisticsRule|1-4": 1, //只能返回1-4，分别代表'Specify the Date Order Number','the Last Cycle Number to Order','the Current Cycle Order Number','Cycles And the Average Current Cycle',
      "day|1-31": 1,
      "reduceAmount|1-1000": 1,
      "settlementDirection|1-2": 1, //只能返回1-2;1表示Operator Pays to Partner；2表示Partner Pays to Operator
      "currency|1-8": 1, //只能1-8
      "startDate": function() {
        return Random.datetime('MM/dd/yyyy')
      },
      "endDate": function() {
        return Random.datetime('MM/dd/yyyy')
      },
      "settlementConditions|1-3": [{
        "id|+1": 1,
        "subscriptionRangeMin|0-5": 0,
        "subscriptionRangeMax|6-10": 6,
        "unitPrice|6-10": 6,
        "basicCharge|6-10": 6
      }],
      "description": "@paragraph"
    },
    'newForm': {
      "ruleName": "@word(5,20)",
      "subscriptionStatisticsMethod|1-2": 1, //只能返回1-2,1表示Up to User,2表示Up to Customer
      "statisticsRule|1-4": 1, //只能返回1-4，分别代表'Specify the Date Order Number','the Last Cycle Number to Order','the Current Cycle Order Number','Cycles And the Average Current Cycle',
      "day|1-31": 1,
      "reduceAmount|1-1000": 1,
      "settlementDirection|1-2": 1, //只能返回1-2;1表示Operator Pays to Partner；2表示Partner Pays to Operator
      "currency|1-8": 1, //只能1-8
      "startDate": function() {
        return Random.datetime('MM/dd/yyyy')
      },
      "endDate": function() {
        return Random.datetime('MM/dd/yyyy')
      },
      "settlementConditions|1-3": [{
        "id|+1": 1,
        "subscriptionRangeMin|0-5": 0,
        "subscriptionRangeMax|6-10": 6,
        "unitPrice|6-10": 6,
        "basicCharge|6-10": 6
      }],
      "description": "@paragraph"
    }
  })

  //
  Mock.mock(/settlementAggregationRuleData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      'oldForm': {
        "ruleName": "@word(5,20)",
        "aggregatedItem": "@word(5,20)",
        "settlementDirection|1-2": 1,
        "currency|1-8": 1, //只能1-8
        "priority|1-1000": 100,
        "settlementDirection|1-2": 1,
        "startDate": function() {
          return Random.datetime('MM/dd/yyyy')
        },
        "endDate": function() {
          return Random.datetime('MM/dd/yyyy')
        },
        "ruleType|1-3": 1,
        "settlementConditions|1-3": [{
          "id|+1": 1,
          "chargeRangeMin|0-5": 0,
          "chargeRangeMax|6-10": 6,
          "ratio|1-100": 0,
          "basicCharge|6-10": 6
        }],
        "description": "@paragraph",
      },
      'newForm': {
        "ruleName": "@word(5,20)",
        "aggregatedItem": "@word(5,20)",
        "settlementDirection|1-2": 1,
        "currency|1-8": 1, //只能1-8
        "priority|1-1000": 100,
        "settlementDirection|1-2": 1,
        "startDate": function() {
          return Random.datetime('MM/dd/yyyy')
        },
        "endDate": function() {
          return Random.datetime('MM/dd/yyyy')
        },
        "ruleType|1-3": 1,
        "settlementConditions|1-3": [{
          "id|+1": 1,
          "chargeRangeMin|0-5": 0,
          "chargeRangeMax|6-10": 6,
          "ratio|1-100": 0,
          "basicCharge|6-10": 6
        }],
        "description": "@paragraph",
      }
    })
    //
  Mock.mock(/settlementOneTimeChargeRuleData.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      'oldForm': {
        "ruleName": "@word(5,20)",
        "oneTimeCharge|1-1000": 1,
        "currency|1-8": 1, //只能1-8
        "settlementDirection|1-2": 1,
        "startDate": function() {
          return Random.datetime('MM/dd/yyyy')
        },
        "endDate": function() {
          return Random.datetime('MM/dd/yyyy')
        },
        "description": "@paragraph",
      },
      'newForm': 0
    })
    //
  Mock.mock(/saveSettlementRuleForm.jsp/, {
    'health': {
      'code': 1,
      'message': function() {
        if (this.code != 1) {
          return 'not health, no data'
        }
      }
    },
    'data': {
      'code': 1,
      'message': 'message'
    }
  })
  Mock.mock(/product2.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      'data|1-4': [{
        'src':function(){
          return Random.dataImage('265x176');
        },
        'href':'@url',
        'productName':'@word(5,10)',
        'revenue':function(){
          return '$'+Random.natural(60, 100);
        }
      }]
    })
  //
  Mock.mock(/cacheList.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
      "data": [
        {
            "EXPIRE_TIME": 12,
            "EXPIRE_TIME_PATH": "/a/s",
            "STATE": "A",
            "NAME": "name1",
            "ID": 1,
            "CACHE_TYPE": "javaCache",
            "FORCE_REFRESH": "N",
            "TENANT_ID": 1,
            "CODE": "code1"
        },
        {
            "EXPIRE_TIME": 1211,
            "EXPIRE_TIME_PATH": "/A/B11",
            "STATE": "A",
            "NAME": "NAME11",
            "ID": 3,
            "CACHE_TYPE": "MEMCACHE11",
            "FORCE_REFRESH": "Y",
            "TENANT_ID": 1,
            "CODE": "CODE3"
        }
    ],
    "totalSize": "2"

    })
Mock.mock(/cacheObjList.json/, {
      'health': {
        'code': 1,
        'message': function() {
          if (this.code != 1) {
            return 'not health, no data'
          }
        }
      },
	  "EXPIRE_TIME": 1211,
      "EXPIRE_TIME_PATH": "/A/B11",
      "STATE": "A",
      "NAME": "NAME11",
      "ID": 3,
      "CACHE_TYPE": "MEMCACHE11",
      "cacheObjs": [
          {
            "STATE": "A",
            "VALUE_PATH": "valuepath111121",
            "ID": 13,
            "CACHE_STRATEGY_ID": 3,
            "KEY_RULE": "keyrule1",
            "TENANT_ID": null,
            "CODE": "code1"
          },
          {
            "STATE": "A",
            "VALUE_PATH": "valuepath2",
            "ID": 14,
            "CACHE_STRATEGY_ID": 3,
            "KEY_RULE": "keyrule2",
            "TENANT_ID": null,
            "CODE": "code2"
          }
      ],
      "FORCE_REFRESH": "Y",
      "TENANT_ID": 1,
      "CODE": "CODE3"
    })
</script>
<!-- /build -->
